@inject IJSRuntime JsRuntime

<EditForm Model="model" OnValidSubmit="OnSubmitAsync">

    <ErrorsList ShowErrors="showErrors" Errors="errors" />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-row">

        <div class="form-group col-md flex-grow-0">
            <label>Quantity</label>
            <div class="input-group mb-3 input-spinner">
                <div class="input-group-prepend">
                    <button @onclick="DecrementQuantity" class="btn btn-light" type="button" id="button-minus"> &minus; </button>
                </div>
                <input @bind-value="model.Quantity" type="text" class="form-control" />
                <div class="input-group-append">
                    <button @onclick="IncrementQuantity" class="btn btn-light" type="button" id="button-plus"> + </button>
                </div>
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md">
            <button type="submit" class="btn btn-primary">
                <span class="text">Add to cart</span>
                <i class="fas fa-shopping-cart"></i>
            </button>

            <a @onclick="() => AddToWishlist()"
               @onclick:preventDefault
               href="#"
               class="btn btn-light">
                <i class="fas fa-heart"></i>
            </a>

            <AuthorizeView Roles="@Constants.AdministratorRole" Context="Auth">
                <a href="/products/update/@ProductId"
                   class="btn btn-outline-warning">
                    <i class="fa fa-pen"></i>
                </a>

                <a @onclick:preventDefault
                   @onclick="() => OnDeleteAsync()"
                   href=""
                   class="btn btn-outline-danger">
                    <i class="fa fa-trash"></i>
                </a>
            </AuthorizeView>
        </div>
    </div>
</EditForm>

@code {
    private readonly ShoppingCartRequestModel model = new ShoppingCartRequestModel();

    private bool showErrors;
    private IEnumerable<string> errors;

    [Parameter]
    public int ProductId { get; set; }

    [Parameter]
    public string ProductName { get; set; }

    [Parameter]
    public int ProductQuantity { get; set; }

    private async Task OnSubmitAsync()
    {
        this.model.ProductId = this.ProductId;

        var response = await this.Http.PostAsJsonAsync("api/shoppingcarts/AddProduct", this.model);

        if (!response.IsSuccessStatusCode)
        {
            this.errors = await response.Content.ReadFromJsonAsync<string[]>();
            this.showErrors = true;
        }
        else
        {
            this.showErrors = false;
            this.NavigationManager.NavigateTo("/cart", forceLoad: true);
        }
    }

    private async Task OnDeleteAsync()
    {
        var confirmed = await this.JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");

        if (confirmed)
        {
            var response = await this.Http.DeleteAsync($"api/products/{this.ProductId}");

            if (response.IsSuccessStatusCode)
            {
                this.ToastService.ShowSuccess($"{this.ProductName} has been deleted successfully.");
                this.NavigationManager.NavigateTo("/products");
            }
        }
    }

    private async Task AddToWishlist()
    {
        await this.Http.PostAsJsonAsync($"api/wishlists/AddProduct/{this.ProductId}", this.ProductId);
        this.ToastService.ShowSuccess($"{this.ProductName} has been added to your wishlist.");
    }

    private void IncrementQuantity()
    {
        if (this.model.Quantity < this.ProductQuantity)
        {
            this.model.Quantity++;
            this.showErrors = false;
        }
    }

    private void DecrementQuantity()
    {
        if (this.model.Quantity > 1)
        {
            this.model.Quantity--;
            this.showErrors = false;
        }
    }
}
