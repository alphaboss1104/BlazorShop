@page "/account/password"
@attribute [Authorize]

<section class="section-content padding-y">
    <div class="container">

        <div class="row">

            <AccountSidebar />

            <main class="col-md-9">

                <article class="card mb-3">
                    <div class="card-body">

                        <h4 class="card-title mb-4">Change Password</h4>
                        <EditForm Model="model" OnValidSubmit="SubmitAsync">

                            <ErrorsList ShowErrors="showErrors" Errors="errors" />
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label>Current password</label>
                                <InputText @bind-Value="model.Password" class="form-control" type="password" />
                            </div>
                            <div class="form-group">
                                <label>New password</label>
                                <InputText @bind-Value="model.NewPassword" class="form-control" type="password" />
                            </div>
                            <div class="form-group">
                                <label>Confirm new password</label>
                                <InputText @bind-Value="model.ConfirmNewPassword" class="form-control" type="password" />
                            </div>

                            <div class="form-group">
                                <button type="submit" class="btn btn-primary btn-block"> Save changes </button>
                            </div>
                        </EditForm>

                    </div>
                </article>

            </main>
        </div>

    </div>
</section>

@code {
    private readonly ChangePasswordRequestModel model = new ChangePasswordRequestModel();

    private bool showErrors;
    private IEnumerable<string> errors;

    private async Task SubmitAsync()
    {
        var token = await this.LocalStorage.GetItemAsync<string>("authToken");
        this.Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await this.Http.PutAsJsonAsync("api/identity/changepassword", this.model);

        if (response.IsSuccessStatusCode)
        {
            this.showErrors = false;

            this.model.Password = null;
            this.model.NewPassword = null;
            this.model.ConfirmNewPassword = null;

            this.NavigationManager.NavigateTo("/account/changepassword");
        }
        else
        {
            this.errors = await response.Content.ReadFromJsonAsync<string[]>();
            this.showErrors = true;
        }
    }
}
