@page "/products"
@page "/products/{CategoryId:int}"

@if (categories == null || products == null)
{
    <LoadingScreen />
}
else
{
    <section class="section-wrap pt-70 pb-40 catalogue">
        <div class="container relative">
            <div class="row">
                <div class="col-md-9 catalogue-col right mb-50">

                    <div class="shop-filter">
                        <p class="result-count">Showing: 1-12 of @products.Length results</p>
                        <AuthorizeView Roles="@WebConstants.AdminRoleName">
                            <a href="/products/add" class="btn btn-sm btn-color ecommerce-ordering">
                                <span>add product</span>
                            </a>
                        </AuthorizeView>
                    </div>

                    <div class="shop-catalogue grid-view left">

                        <div class="row row-10 items-grid">

                            @foreach (var product in this.products)
                            {
                                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                    
                                    <div class="col-md-4 col-xs-6">
                                        
                                        <ProductItem Product="product" />
                                    
                                    </div>

                                </Animate>
                            }

                        </div>
                    </div>

                    <div class="clear"></div>

                    <Pagination />

                </div>

                <CategoriesSidebar Categories="categories" />

            </div>
        </div>
    </section>
}

@code {
    private ProductListingResponseModel[] products;
    private CategoryListingResponseModel[] categories;

    [Parameter] public int CategoryId { get; set; }

    protected override async Task OnParametersSetAsync() => await this.LoadData();

    protected override async Task OnInitializedAsync() => await this.LoadData();

    private async Task LoadData()
    {
        var requestUri = this.CategoryId == 0 ? "api/products" : $"api/products/ByCategory/{this.CategoryId}";

        this.products = await this.Http.GetFromJsonAsync<ProductListingResponseModel[]>(requestUri);
        this.categories = await this.Http.GetFromJsonAsync<CategoryListingResponseModel[]>("api/categories");
    }
}