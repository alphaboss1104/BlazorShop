@page "/account/login"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject TokenAuthenticationStateProvider AuthStateProvider

<h1 class="text-center">Login</h1>

<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4">
        @if (loginFailure)
        {
            <div class="alert alert-danger" role="alert">
                <strong>Invalid username or password.</strong>
            </div>
        }
        <EditForm Model="model" OnValidSubmit="this.Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Username</label>
                <InputText class="form-control" placeholder="Username..." @bind-Value="model.Username" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText type="password" class="form-control" placeholder="Password..." @bind-Value="model.Password" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>
    </div>
    <div class="col-md-4"></div>
</div>

@code {
    private readonly LoginRequestModel model = new LoginRequestModel();

    private bool loginFailure;

    private async Task Submit()
    {
        var response = await this.HttpClient.PostAsJsonAsync<LoginRequestModel>("api/identity/login", model);
        var responseModel = await response.Content.ReadFromJsonAsync<LoginResponseModel>();
        var token = responseModel.Token;
        this.loginFailure = token == null;
        if (!this.loginFailure)
        {
            await this.AuthStateProvider.SetTokenAsync(token);
            this.NavigationManager.NavigateTo("/");
        }
    }
}
