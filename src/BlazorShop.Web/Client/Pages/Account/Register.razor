@page "/account/register"
@inject IToastService ToastService

<section class="page-title text-center">
    <div class="container relative clearfix">
        <div class="title-holder">
            <div class="title-text">
                <h1 class="uppercase">Register</h1>
            </div>
        </div>
    </div>
</section>
<section class="section-wrap login-register pt-0 pb-40">
    <div class="container">
        <div class="row">
            <div class="col-md-4"></div>

            <div class="col-md-4">
                <EditForm Model="model" OnValidSubmit="Submit" class="login">
                    
                    @if (showErrors)
                    {
                        <div class="alert alert-danger fade in alert-dismissible" role="alert">
                            <button @onclick="Reset" type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                            
                            @foreach (var error in errors)
                            {
                                <p>@error</p>
                            }

                        </div>
                    }

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <p class="form-row form-row-wide">
                        <label>
                            email
                            <abbr class="required" title="Required">*</abbr>
                        </label>
                        <InputText @bind-Value="model.Email" type="email" class="form-control" placeholder="Email" />
                    </p>

                    <p class="form-row form-row-wide">
                        <label>
                            username
                            <abbr class="required" title="Required">*</abbr>
                        </label>
                        <InputText @bind-Value="model.Username" type="text" class="form-control" placeholder="Username" />
                    </p>

                    <p class="form-row form-row-wide">
                        <label>
                            first name
                            <abbr class="required" title="Required">*</abbr>
                        </label>
                        <InputText @bind-Value="model.FirstName" type="text" class="form-control" placeholder="First name" />
                    </p>

                    <p class="form-row form-row-wide">
                        <label>
                            last name
                            <abbr class="required" title="Required">*</abbr>
                        </label>
                        <InputText @bind-Value="model.LastName" type="text" class="form-control" placeholder="Last name" />
                    </p>

                    <p class="form-row form-row-wide">
                        <label>
                            password
                            <abbr class="required" title="Required">*</abbr>
                        </label>
                        <InputText @bind-Value="model.Password" type="password" class="form-control" placeholder="Password" />
                    </p>

                    <p class="form-row form-row-wide">
                        <label>
                            confirm password
                            <abbr class="required" title="Required. Should match with password">*</abbr>
                        </label>
                        <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control" placeholder="Confrim Password" />
                    </p>

                    <button type="submit" class="btn"> Register </button>

                </EditForm>
            </div>

            <div class="col-md-4"></div>
        </div>
    </div>
</section>

@code {
    private readonly RegisterRequestModel model = new RegisterRequestModel();

    private bool showErrors;
    private IEnumerable<string> errors;

    private void Reset()
    {
        showErrors = !showErrors;
    }

    private async Task Submit()
    {
        showErrors = false;

        var result = await this.AuthService.Register(model);

        if (result.Successful)
        {
            this.NavigationManager.NavigateTo("account/login");
            this.ToastService.ShowSuccess("You have been successfully registered.\nPlease login.");
        }
        else
        {
            errors = result.Errors;
            showErrors = true;
        }
    }
}