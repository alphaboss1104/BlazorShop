@page "/account/login"

<section class="section-conten padding-y bg">

    <div class="card mx-auto" style="max-width: 380px; margin-top:100px;">
        <div class="card-body">
            <h4 class="card-title mb-4">Login</h4>
            <EditForm Model="model" OnValidSubmit="SubmitAsync">

                <ErrorsList ShowErrors="showErrors" Errors="errors" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"> <i class="fa fa-envelope"></i> </span>
                        </div>
                        <InputText @bind-Value="model.Email" class="form-control" placeholder="Email" type="email" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"> <i class="fa fa-lock"></i> </span>
                        </div>
                        <InputText @bind-Value="model.Password" class="form-control" placeholder="Password" type="password" />
                    </div>
                </div>

                <div class="form-group">
                    <a href="#" class="float-left">Forgot password?</a>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary btn-block"> Login  </button>
                </div>
            </EditForm>
        </div>
    </div>

    <p class="text-center mt-4">Don't have account? <a href="/account/register">Create one now</a></p>
    <br /><br />

</section>

@code {
    private readonly LoginRequestModel model = new LoginRequestModel();

    private bool showErrors;
    private IEnumerable<string> errors;

    private async Task SubmitAsync()
    {
        var result = await this.AuthService.Login(model);

        if (result.Succeeded)
        {
            this.ToastService.ShowSuccess("You have successfully logged in");
            this.NavigationManager.NavigateTo("/");
        }
        else
        {
            this.errors = result.Errors;
            this.showErrors = true;
        }
    }
}
