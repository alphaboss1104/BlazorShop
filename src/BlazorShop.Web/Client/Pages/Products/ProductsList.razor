@page "/products"
@page "/products/{PageNumber:int}"
@page "/products/{SearchQuery}/{PageNumber:int}"
@page "/categories/{CategoryName}/{CategoryId:int}"

@if (categories == null || products == null)
{
    <LoadingScreen />
}
else
{
    <section class="section-content padding-y bg">
        <div class="container">

            <div class="row">

                <Sidebar Categories="categories" />

                <main class="col-md-9">

                    <header class="border-bottom mb-4 pb-3">
                        <div class="form-inline">
                            <span class="mr-md-auto">@products.Length Items found </span>
                            <select class="mr-2 form-control">
                                <option>Latest items</option>
                                <option>Trending</option>
                                <option>Most Popular</option>
                                <option>Cheapest</option>
                            </select>
                            <div class="btn-group">
                                <a href="#" class="btn btn-outline-secondary" data-toggle="tooltip" title="List view">
                                    <i class="fa fa-bars"></i>
                                </a>
                                <a href="#" class="btn  btn-outline-secondary active" data-toggle="tooltip" title="Grid view">
                                    <i class="fa fa-th"></i>
                                </a>
                            </div>
                        </div>
                    </header>

                    <div class="row">

                        @foreach (var product in this.products)
                        {
                            <div class="col-md-4">
                                <figure class="card card-product-grid">
                                    <div class="img-wrap">
                                        @*<span class="badge badge-danger"> NEW </span>*@
                                        <img src="@product.ImageSource">
                                        <a class="btn-overlay" href="/products/@product.Id/@product.Name">
                                            <i class="fa fa-search-plus"></i>
                                            Quick view
                                        </a>
                                    </div>
                                    <figcaption class="info-wrap">
                                        <div class="fix-height">
                                            <a href="/products/@product.Id/@product.Name" class="title">
                                                @product.Name
                                            </a>
                                            <div class="price-wrap mt-2">
                                                <span class="price">$@product.Price</span>
                                                @*<del class="price-old">$1980</del>*@
                                            </div>
                                        </div>
                                        <a href="#" class="btn btn-block btn-primary">Add to cart </a>
                                    </figcaption>
                                </figure>
                            </div>
                        }

                    </div>

                    <Pagination />

                </main>

            </div>

        </div>
    </section>
}

@code {
    private ProductsListingResponseModel[] products;
    private CategoriesListingResponseModel[] categories;

    [Parameter]
    public int PageNumber { get; set; } = 1;

    [Parameter]
    public string SearchQuery { get; set; } = string.Empty;

    [Parameter]
    public int CategoryId { get; set; }

    [Parameter]
    public string CategoryName { get; set; }

    protected override async Task OnParametersSetAsync() => await this.LoadData();

    protected override async Task OnInitializedAsync() => await this.LoadData();

    private async Task LoadData()
    {
        var requestUrl = "api/products";

        if (string.IsNullOrWhiteSpace(this.SearchQuery))
        {
            requestUrl = this.PageNumber > 1 ? $"api/products?page={this.PageNumber}" : "api/products";
        }
        else
        {
            requestUrl = $"api/search/products?query={this.SearchQuery}&page={this.PageNumber}";
        }

        if (this.CategoryId != 0 && !string.IsNullOrEmpty(this.CategoryName))
        {
            requestUrl = $"api/categories/{this.CategoryId}";
        }

        this.products = await this.Http.GetFromJsonAsync<ProductsListingResponseModel[]>(requestUrl);
        this.categories = await this.Http.GetFromJsonAsync<CategoriesListingResponseModel[]>("api/categories");
    }
}